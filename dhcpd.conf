# dhcpd.conf
#
# Sample configuration file for ISC dhcpd
#
# Attention: If /etc/ltsp/dhcpd.conf exists, that will be used as
# configuration file instead of this file.
#

# option definitions common to all supported networks...
default-lease-time 21600;
max-lease-time 86400;

# interface
INTERFACES="ens33 enp2s0";

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
#log-facility local7;

# No service will be given on this subnet, but declaring it helps the
# DHCP server to understand the network topology.

# PXE BOOTING
#option space pxelinux;
#option pxelinux.magic code 208 = string;
#option pxelinux.configfile code 209 = text;
#option pxelinux.pathprefix code 210 = text;
#option pxelinux.reboottime code 211 = unsigned integer 32;
#option architecture-type code 93 = unsigned integer 16;

# iPXE - (file depends on architecture and clas)
option client-arch code 93 = unsigned integer 16;
if exists user-class and option user-class = "iPXE" {
    filename "http://192.168.1.3/tftpboot/ipxe/scripts/bootstrap.ipxe";
} else { 

    if exists client-arch {
        if option client-arch = 00:00 {      # prevent bootloop on chain loading
            filename "ipxe/undionly.kpxe";
        } elsif option client-arch = 00:06 { # i386
            filename "ipxe/bin-i386-efi/ipxe.efi";
        } elsif option client-arch = 00:07 { # x86_64
            filename "ipxe/bin-x86_64-efi/ipxe.efi";
        } elsif option client-arch = 00:09 { # x86_64
            filename "ipxe/bin-x86_64-efi/ipxe.efi";
        } elsif option client-arch = 00:0a { # arm32
            filename "ipxe/bin-arm32-efi/ipxe.efi";
        } elsif option client-arch = 00:0b { # arm64 / aarch64
            filename "ipxe/bin-arm64-efi/ipxe.efi";     #<-- custom compiled iPXE arm64 (working backgrounds!)
            #filename "ipxe/netboot.xyz-rpi4-snp.efi";  #<-- works to load netboot with working iPXE
            #filename "efi/boot/bootaa64.efi";          #<-- also works, same issues as above
            #filename  "ipxe/tests/arm64/ipxe.efi";     #<-- custom compiled arm64 iPXE
            #filename "ipxe/arm64-efi/ipxe.efi";        #<-- boots but fails after iPXE init devices
        }
    }
}

### main LAN subnet (192.168.1.0/24)
subnet 192.168.1.0 netmask 255.255.255.0 {


    ## SUBNET, BROADCAST, ROUTES, NAMESERVERS, and DOMAIN
    option subnet-mask 255.255.255.0;
    option broadcast-address 192.168.1.255;
    option routers 192.168.1.1;
    option domain-name-servers 8.8.8.8, 8.8.4.4;
    option domain-search "binary.run";

    ## FIXED IPs

    # 192.168.1.1-19 - networking & printers

    # bridges - VM [DHCP / TFTP / DNS / NFS]
    host bridges {
        hardware ethernet 00:0c:29:fc:79:75;
        fixed-address 192.168.1.3;
        option domain-name "bridges";
        #option vendor-class-identifier "PXEClient";
        #option vendor-encapsulated-options "Raspberry Pi Boot";
        #option tftp-server-name "192.168.1.3";
        #next-server 192.168.1.3;
        #filename "pxelinux.0";
    }
    
    # fragile - HP T620 [DHCP / TFTP / DNS]
    host fragile {
        hardware ethernet 7c:d3:0a:12:b0:4b;
        fixed-address 192.168.1.4;
        option domain-name "fragile";

	    # PXE booting
        next-server 192.168.1.3;
        #option bootfile-name "syslinux.efi";
    }
    
    # bb-28 - Raspberry Pi 4B [DHCP / TFTP / DNS]
    host bb-28 {
        hardware ethernet dc:a6:32:63:ef:f4;
        fixed-address 192.168.1.5;
        option domain-name "bb-28";
        option vendor-encapsulated-options "Raspberry Pi Boot";
        option tftp-server-name "192.168.1.3";
        next-server 192.168.1.3;
        # filename only needed for Pi 3 and earlier
        # (eeprom on Pi 4 replaces this)
        #filename "bootcode.bin";
        #filename "netboot.xyz-rpi4-snp.efi";
    }
    host bb-28-wifi {
        hardware ethernet dc:a6:32:63:ef:f5;
        fixed-address 192.168.1.15;
        option domain-name "bb-28";
    }

    # raiden - Dell OptiPlex 3050 Micro
    host raiden {
        hardware ethernet 14:b3:1f:22:b6:2c;
        fixed-address 192.168.1.22;
        option domain-name "raiden";
    }
    host raiden-wifi {
        hardware ethernet 44:85:00:ac:6f:2a;
        fixed-address 192.168.1.32;
        option domain-name "raiden";
    }
    
    # otacon - Acer Laptop Aspire V5-552G-8632
    host otacon {
        hardware ethernet 08:9e:01:d2:af:42;
        fixed-address 192.168.1.23;
        option domain-name "otacon";
    }
    host otacon-wifi {
        hardware ethernet 48:d2:24:21:1e:91;
        fixed-address 192.168.1.33;
        option domain-name "otacon";
    }

    # 192.168.1.50-59 - home lab raspberry pis

    # Raspberry Pi 4B - 4 GB RAM
    host pumpkin {
        hardware ethernet dc:a6:32:0e:e2:81;
        fixed-address 192.168.1.50;
        option domain-name "pumpkin";
    }
    host pumpkin-wifi {
        hardware ethernet dc:a6:32:0e:e2:82;
        fixed-address 192.168.1.55;
        option domain-name "pumpkin";
    }

    # Raspberry Pi 4Bs - 2 GB RAM
    host apple {
        hardware ethernet dc:a6:32:04:52:f3;
        fixed-address 192.168.1.51;
        option domain-name "apple";
    }
    host apple-wifi {
        hardware ethernet dc:a6:32:04:52:f4;
        fixed-address 192.168.1.56;
        option domain-name "apple";
    }

    host strawberry {
        hardware ethernet dc:a6:32:04:38:c4;
        fixed-address 192.168.1.52;
        option domain-name "strawberry";
    }
    host strawberry-wifi {
        hardware ethernet dc:a6:32:04:38:c5;
        fixed-address 192.168.1.57;
        option domain-name "strawberry";
    }

    host blueberry {
        hardware ethernet dc:a6:32:04:52:de;
        fixed-address 192.168.1.53;
        option domain-name "blueberry";
    }
    host blueberry-wifi {
        hardware ethernet dc:a6:32:04:52:df;
        fixed-address 192.168.1.58;
        option domain-name "blueberry";
    }

    # Raspberry Pi 3B
    host pecan {
        hardware ethernet b8:27:eb:13:73:a1;
        fixed-address 192.168.1.54;
        option domain-name "pecan";
    }
    host pecan-wifi {
        hardware ethernet b8:27:eb:46:26:f4;
        fixed-address 192.168.1.59;
        option domain-name "pecan";
    }

    # 192.168.1.60-69 - home lab HP T620s

    # HP T620 Cluster - Green (Legend of Zelda)
    host triforce {
        hardware ethernet 00:8c:fa:d0:e6:57;
        fixed-address 192.168.1.60;
        option domain-name "triforce";
    }

    host link {
        hardware ethernet 00:8c:fa:d5:23:35;
        fixed-address 192.168.1.61;
        option domain-name "link";
    }

    host zelda {
        hardware ethernet 00:8c:fa:d5:23:b5;
        fixed-address 192.168.1.62;
        option domain-name "zelda";
    }

    host ganon {
        hardware ethernet 00:8c:fa:d5:e0:bd;
        fixed-address 192.168.1.63;
        option domain-name "ganon";
    }
    
    # HP T620 Cluster - Blue (Mario Bros)
    host mushroom {
        hardware ethernet 7c:d3:0a:1b:26:ef;
        fixed-address 192.168.1.64;
        option domain-name "mushroom";
    }
    
    host mario {
        hardware ethernet 00:8c:fa:d5:33:58;
        fixed-address 192.168.1.65;
        option domain-name "mario";
    }
    
    host luigi {
        hardware ethernet 00:8c:fa:d5:73:5c;
        fixed-address 192.168.1.66;
        option domain-name "luigi";
    }

    host peach {
        hardware ethernet 00:8c:fa:d5:73:7a;
        fixed-address 192.168.1.67;
        option domain-name "peach";
    }

    # HP T620 - Spare Unit
    host spare {
        hardware ethernet 00:8c:fa:d5:63:e6;
        fixed-address 192.168.1.68;
        option domain-name "spare";
    }

    ## DHCP POOL
    pool {
        range 192.168.1.100 192.168.1.199;  
        default-lease-time 21600;   # 8 hours
        max-lease-time     86400;   # 24 hours
    }
}
